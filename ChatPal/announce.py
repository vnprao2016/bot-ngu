"""
announce.py
Cog providing /announce (slash) and !announce (prefix) using a Modal and a button view.
"""
import discord
from discord import app_commands
from discord.ext import commands


class AnnounceModal(discord.ui.Modal, title="üì¢ T·∫°o th√¥ng b√°o"):

    def __init__(self, interaction: discord.Interaction):
        super().__init__()
        self.interaction_user = interaction.user
        self.interaction_channel = interaction.channel

        self.title_input = discord.ui.TextInput(
            label="Ti√™u ƒë·ªÅ",
            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o...",
            max_length=200)
        self.add_item(self.title_input)

        self.content_input = discord.ui.TextInput(
            label="N·ªôi dung",
            style=discord.TextStyle.paragraph,
            placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o...",
            max_length=2000)
        self.add_item(self.content_input)

        self.image_url_input = discord.ui.TextInput(
            label="Link ·∫£nh (t√πy ch·ªçn)",
            placeholder="Nh·∫≠p URL ·∫£nh ho·∫∑c ƒë·ªÉ tr·ªëng",
            required=False)
        self.add_item(self.image_url_input)

        self.color_input = discord.ui.TextInput(
            label="M√†u embed (HEX, v√≠ d·ª• #ff0000)",
            placeholder="M·∫∑c ƒë·ªãnh l√† xanh l√°",
            required=False)
        self.add_item(self.color_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            color_value = self.color_input.value.strip().lstrip(
                "#") if self.color_input.value else None
            color = discord.Color(int(
                color_value, 16)) if color_value else discord.Color.green()
        except (ValueError, AttributeError):
            color = discord.Color.green()

        embed = discord.Embed(title=self.title_input.value,
                              description=self.content_input.value,
                              color=color)
        if self.image_url_input.value and self.image_url_input.value.strip(
        ).startswith("http"):
            embed.set_image(url=self.image_url_input.value.strip())
        embed.set_footer(
            text=f"Th√¥ng b√°o b·ªüi {self.interaction_user.display_name}")

        try:
            await self.interaction_channel.send(embed=embed)
            await interaction.response.send_message("‚úÖ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
                                                    ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i th√¥ng b√°o ·ªü k√™nh n√†y.",
                ephemeral=True)


class Announce(commands.Cog):

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="announce",
                          description="T·∫°o th√¥ng b√°o v·ªõi embed")
    @app_commands.checks.has_permissions(administrator=True)
    async def announce_slash(self, interaction: discord.Interaction):
        await interaction.response.send_modal(AnnounceModal(interaction))

    @commands.command(name="announce")
    @commands.has_permissions(administrator=True)
    async def announce_prefix(self, ctx: commands.Context):
        view = discord.ui.View()
        button = discord.ui.Button(label="üì¢ T·∫°o th√¥ng b√°o",
                                   style=discord.ButtonStyle.primary)

        async def button_callback(interaction: discord.Interaction):
            if interaction.user.id != ctx.author.id:
                await interaction.response.send_message(
                    "‚ùå B·∫°n kh√¥ng th·ªÉ d√πng n√∫t n√†y.", ephemeral=True)
                return
            if not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå B·∫°n c·∫ßn quy·ªÅn Qu·∫£n tr·ªã vi√™n ƒë·ªÉ t·∫°o th√¥ng b√°o.",
                    ephemeral=True)
                return
            await interaction.response.send_modal(AnnounceModal(interaction))

        button.callback = button_callback
        view.add_item(button)

        await ctx.send(
            f"{ctx.author.mention} b·∫•m n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o th√¥ng b√°o:",
            view=view)


async def setup(bot: commands.Bot):
    await bot.add_cog(Announce(bot))
